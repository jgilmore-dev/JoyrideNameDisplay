name: Build and Release MemberNameDisplay

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update package version from tag
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          RELEASE_VERSION: ${{ github.ref_name }}
        run: |
          # Strip 'v' prefix from tag name
          VERSION=${RELEASE_VERSION#v}
          echo "Setting package version to $VERSION"
          npm version $VERSION --no-git-tag-version || true
        shell: bash

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Install Linux build dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y fakeroot dpkg

      - name: List all files in src/assets/icons (Linux/macOS)
        if: runner.os != 'Windows'
        run: ls -lR src/assets/icons/

      - name: List all files in src/assets/icons (Windows)
        if: runner.os == 'Windows'
        run: Get-ChildItem -Recurse src/assets/icons/

      - name: Generate platform-specific icons
        run: |
          # Generate all platform icons
          echo "Generating cross-platform icons..."
          npm run generate-icons
          
          # Copy icons to build directory
          echo "Copying icons to build directory..."
          npm run copy-icons
          
          # List generated icons
          echo "Generated icons:"
          ls src/assets/icons/

      - name: Build distributables
        run: npm run make

      - name: Verify release assets
        run: npm run verify-release

      - name: Organize artifacts for update system
        run: |
          # Create a clean artifacts directory for the update system
          mkdir -p artifacts/${{ matrix.os }}
          
          # Copy all build outputs to organized structure
          cp -r out/make/* artifacts/${{ matrix.os }}/
          
          # List organized artifacts
          echo "Organized artifacts for ${{ matrix.os }}:"
          find artifacts/${{ matrix.os }} -type f -name "*.exe" -o -name "*.dmg" -o -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" -o -name "*.zip" | head -10

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: membernamedisplay-${{ matrix.os }}-artifacts
          path: artifacts/${{ matrix.os }}/**

  upload-release-assets:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List all artifacts
        run: |
          echo "All downloaded artifacts:"
          find artifacts -type f -name "*.exe" -o -name "*.dmg" -o -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" -o -name "*.zip" | sort

      - name: Generate update metadata
        env:
          RELEASE_VERSION: ${{ github.ref_name }}
        run: |
          # Strip 'v' prefix from tag name
          VERSION=${RELEASE_VERSION#v}
          
          # Find all installer files
          INSTALLERS=$(find artifacts -type f \( -name "*.exe" -o -name "*.dmg" -o -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" -o -name "*.zip" \) | grep -E "(MemberNameDisplay|membernamedisplay)" | sort)
          
          # Create update metadata
          cat > update-metadata.json << EOF
          {
            "version": "$VERSION",
            "releaseDate": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)",
            "releaseNotes": "${{ github.event.release.body }}",
            "installerFiles": [
          EOF
          
          # Add each installer to metadata
          FIRST=true
          for installer in $INSTALLERS; do
            if [ "$FIRST" = true ]; then
              FIRST=false
            else
              echo "," >> update-metadata.json
            fi
            echo "              \"$(basename $installer)\"" >> update-metadata.json
          done
          
          echo "            ]" >> update-metadata.json
          echo "          }" >> update-metadata.json
          
          echo "Generated update metadata:"
          cat update-metadata.json

      - name: Prepare Pi client assets
        env:
          RELEASE_VERSION: ${{ github.ref_name }}
        run: |
          # Strip 'v' prefix from tag name
          VERSION=${RELEASE_VERSION#v}
          
          # Create Pi assets directory
          mkdir -p pi-assets
          
          # Copy Pi client files
          cp src/pi-display-client.html pi-assets/
          cp scripts/pi-boot-setup.sh pi-assets/
          cp scripts/update-client.sh pi-assets/
          
          # Create Pi client metadata
          cat > pi-assets/pi-client-metadata.json << EOF
          {
            "version": "$VERSION",
            "releaseDate": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)",
            "files": [
              "pi-display-client.html",
              "pi-boot-setup.sh",
              "update-client.sh"
            ],
            "updateUrl": "https://github.com/jgilmore-dev/MemberNameDisplay/releases/download/${{ github.ref_name }}/pi-display-client.html",
            "setupUrl": "https://github.com/jgilmore-dev/MemberNameDisplay/releases/download/${{ github.ref_name }}/pi-boot-setup.sh"
          }
          EOF
          
          # Create Pi client package
          tar -czf pi-client-$VERSION.tar.gz -C pi-assets .
          
          echo "Pi client assets prepared:"
          ls -la pi-assets/
          echo "Pi client package: pi-client-$VERSION.tar.gz"

      - name: Upload assets to release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/membernamedisplay-*/**/*
            update-metadata.json
            pi-assets/*
            pi-client-${{ github.ref_name }}.tar.gz
          body: |
            ## Release ${{ github.ref_name }}
            
            ${{ github.event.release.body }}
            
            ### Platform Support
            - **Windows**: .exe installer
            - **macOS**: .dmg and .zip packages
            - **Linux**: .deb, .rpm, and .AppImage packages
            - **Raspberry Pi**: HTML client and setup scripts
            
            ### Update System
            This release includes the unified cross-platform update system that automatically detects and installs updates from:
            - GitHub releases (automatic)
            - Local update directories
            - Network shares
            - USB drives
            
            ### Installation
            **Desktop Applications**: Download the appropriate installer for your platform and run it. The application will automatically check for updates on startup.
            
            **Raspberry Pi Clients**: 
            - Use `pi-boot-setup.sh` for initial setup
            - Clients will automatically update from this release
            - Manual update: `wget https://github.com/jgilmore-dev/MemberNameDisplay/releases/download/${{ github.ref_name }}/pi-display-client.html`
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 